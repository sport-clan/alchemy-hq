#!/usr/bin/env ruby

path = ARGV.shift
socket_path = "#{path}.sock"
pid_path = "#{path}.pid"

ctl_rd, ctl_wr = IO.pipe

fork do
	ctl_rd.close

	# exit if ssh dies
	Signal.trap "CHLD" do
		exit
	end

	# run ssh as subprocess
	ssh_rd, ssh_wr = IO.pipe
	ssh_pid = fork do
		ssh_rd.close
		$stdin.reopen "/dev/null", "r"
		$stdout.reopen ssh_wr
		$stderr.reopen ssh_wr
		ctl_wr.close
		exec *ARGV
	end
	ssh_wr.close

	# write pid file
	File.open(pid_path, "w") { |f| f.puts $$ }

	# wait for socket
	while true
		rs, = IO.select [ ssh_rd ], nil, nil, 1
		ctl_wr.print ssh_rd.read_nonblock(1024) if rs
		if File.exists? socket_path
			break
		end
	end

	# signal we are ok
	ctl_wr.puts "ok"
	ctl_wr.close

	# clean up on exit
	at_exit do
		begin
			Process.kill 15, ssh_pid
		rescue => e
		end
		begin
			File.unlink pid_path
		rescue => e
		end
	end

	# exit if pid file gets mangled
	begin
		while (mtime ||= nil) == (mtime = File.mtime(pid_path)) \
				|| File.read(pid_path).chomp == $$.to_s
			rs, = IO.select [ ssh_rd ], nil, nil, 1
			ssh_rd.read_nonblock(1024) if rs
		end
	rescue IOError
	rescue Errno::ENOENT
	end
end

ctl_wr.close

ok = false
while line = ctl_rd.gets
	exit 0 if line == "ok\n"
	puts line
end

exit 1
